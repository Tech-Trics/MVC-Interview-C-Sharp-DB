@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
    <h1 class="display-4">Welcome</h1>
    <p>This interview site is meant to test your understanding of asp.net core, C#, and front-end 
        technologies like javaScript and Angular. Below you will find instructions for 
        completing this interview
    </p>
    <ul>
        <li>What is an interface?</li>
        <li>What is an abstract class?</li>
        <li>How many classes can another class inherit from?</li>
        <li>How many interfaces can a class implement?</li>
        <li>What is POST, GET, PATCH, DELETE used for?</li>
        <li>What is dependency injection and why is it used?</li>
        <li>What is Scoped, Transient, and Singleton?</li>
    </ul>
    
    <ul>
        <li>Talk/Show example of an action filter</li>
        <li>Show how you would know if an action method is a POST or GET</li>
        <li>Add a footer to all of the pages</li>
        <li>Create a div with some text in it that can be reused on any page </li>
        <li>Go to the models folder and show an example of a data annotation</li>
        <li>Create an extension method that will convert a string to an int and can be used anywhere in the solution</li>
        <li>Show some example of collection types</li>
        <li>Go to ICollectionExample interface and implement</li>
        <li>Register the ICollectionExample interface with the dependency injection framework</li>
        <li>If you wanted a list with distinct items what type of collection could you use</li>
        <li>Show an asynchronous method</li>
        <li>Show how you would insert some logic into the request lifecycle</li>
    </ul>
    
    <br/><br/>
    <p>The following are homework items </p>
    <ul>
        <li>Go to Customer Page and implement the page</li>
        <li>Go to DataAccess class and answer questions in the code and implement the remaining methods to show proficiency with ADO.net</li>
        <li>Go to EFDataAccess and implement to show proficiency with EF. Please also scaffold the DB</li>
        <li>Implement a login and add some extra fields to the user table</li>
        <li>Go wild refactoring the site. The template is not written in a way that would meet the needs of a real world enterprise level application.
            Feel free to change the architecture or add projects, pages, 3rd party packages or whatever to the solution to show off what you know
            and what you can bring to this company</li>
    </ul>
</div>
